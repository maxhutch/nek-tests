module usr
  use size_m
  use kinds, only : DP
  real(DP) :: ue(lx1,ly1,lz1,lelt),ve(lx1,ly1,lz1,lelt)
  real(DP) :: ud(lx1,ly1,lz1,lelt),vd(lx1,ly1,lz1,lelt)
end module usr

!-----------------------------------------------------------------------
      subroutine exact(uu,vv,xx,yy,n,time,visc,u0,v0)
!
!     This routine creates initial conditions for an exact solution
!     to the Navier-Stokes equations based on the paper of Walsh [1],
!     with an additional translational velocity (u0,v0).
!     
!     The computational domain is [0,2pi]^2 with doubly-periodic 
!     boundary conditions.
!     
!     Walsh's solution consists of an array of vortices determined 
!     as a linear combinations of eigenfunctions of having form:
!     
!         cos(pi m x)cos(pi n y), cos(pi m x)sin(pi n y)
!         sin(pi m x)cos(pi n y), sin(pi m x)sin(pi n y)
!     
!     and
!
!         cos(pi k x)cos(pi l y), cos(pi k x)sin(pi l y)
!         sin(pi k x)cos(pi l y), sin(pi k x)sin(pi l y)
!     
!     While there are constraints on admissible (m,n),(k,l)
!     pairings, Walsh shows that there is a large class of
!     possible pairings that give rise to very complex vortex
!     patterns.
!     
!     Walsh's solution applies either to unsteady Stokes or 
!     unsteady Navier-Stokes.  The solution is a non-translating
!     decaying array of vortices that decays at the rate 
!
!          exp ( -4 pi^2 (m^2+n^2) visc time ),
!
!     with (m^2+n^2) = (k^2+l^2). A nearly stationary state may
!     be obtained by taking the viscosity to be extremely small,
!     so the effective decay is negligible.   This limit, however,
!     leads to an unstable state, thus diminsishing the value of 
!     Walsh's solution as a high-Reynolds number test case.
!
!     It is possible to extend Walsh's solution to a stable convectively-
!     dominated case by simulating an array of vortices that translate
!     at arbitrary speed by adding a constant to the initial velocity field.  
!     This approach provides a good test for convection-diffusion dynamics.
!     
!     The approach can also be extended to incompressible MHD with unit
!     magnetic Prandtl number Pm.
!     
! [1] Owen Walsh, "Eddy Solutions of the Navier-Stokes Equations,"
!     in The Navier-Stokes Equations II - Theory and Numerical Methods,
!     Proceedings, Oberwolfach 1991, J.G. Heywood, K. Masuda,
!     R. Rautmann,  S.A. Solonnikov, Eds., Springer-Verlag, pp. 306--309
!     (1992).
!
!     2/23/02; 6/2/09;  pff
!
!
  use size_m
  use input
  use kinds, only : DP
  implicit none
!
      real(DP) uu(n),vv(n),xx(n),yy(n)
!
      real(DP), save :: cpsi(2,5), a(2,5)

!     data a / .4,.45 , .4,.2 , -.2,-.1 , .2,.05, -.09,-.1 / ! See eddy.m
!     data cpsi / 0,65 , 16,63 , 25,60 , 33,56 , 39,52 /     ! See squares.f
!     data cpsi / 0,85 , 13,84 , 36,77 , 40,75 , 51,68 /


!     This data from Walsh's Figure 1 [1]:

!      data a / -.2,-.2, .25,0.,   0,0  ,  0,0  ,  0,0  /
!      data cpsi / 0, 5 ,  3, 4 ,  0,0  ,  0,0  ,  0,0  /
      real(DP) :: time, visc, u0, v0
      integer :: n
      real(DP) :: sx, sy, sz, s1x, s1y, s1z, s2x, s2y
      real(DP) :: x, y, u, v
      real(DP) :: one, pi, aa, arg, e, cx, cy, cz
      real(DP) :: c1, c1x, c1y, c1z, c2, c2x, c2y
      integer :: i, k

      a(:,1) = (/-.2, -.2 /)
      a(:,2) = (/.25, 0.0 /)
      a(:,3) = (/0.0, 0.0 /)
      a(:,4) = (/0.0, 0.0 /)
      a(:,5) = (/0.0, 0.0 /)

      cpsi(:,1) = (/ 0., 5. /)
      cpsi(:,2) = (/ 3., 4. /)
      cpsi(:,3) = (/ 0., 0. /)
      cpsi(:,4) = (/ 0., 0. /)
      cpsi(:,5) = (/ 0., 0. /)

      one   = 1.
      pi    = 4.*atan(one)

      aa    = cpsi(2,1)**2
      arg   = -visc*time*aa  ! domain is [0:2pi]
      e     = exp(arg)
!c
!c     ux = psi_y,  uy = -psi_x
!c
      do i=1,n
         x = xx(i) - u0*time
         y = yy(i) - v0*time

         sx = sin(cpsi(2,1)*x)
         cx = cos(cpsi(2,1)*x)
         sy = sin(cpsi(2,1)*y)
         cy = cos(cpsi(2,1)*y)
         u  =  a(1,1)*cpsi(2,1)*cy 
         v  =  a(2,1)*cpsi(2,1)*sx

         do k=2,5
            s1x = sin(cpsi(1,k)*x)
            c1x = cos(cpsi(1,k)*x)
            s2x = sin(cpsi(2,k)*x)
            c2x = cos(cpsi(2,k)*x)

            s1y = sin(cpsi(1,k)*y)
            c1y = cos(cpsi(1,k)*y)
            s2y = sin(cpsi(2,k)*y)
            c2y = cos(cpsi(2,k)*y)
            
            c1  = cpsi(1,k)
            c2  = cpsi(2,k)

            if (k.eq.2) u = u + a(1,k)*s1x*c2y*c2
            if (k.eq.2) v = v - a(1,k)*c1x*s2y*c1
            if (k.eq.2) u = u - a(2,k)*s2x*c1y*c1
            if (k.eq.2) v = v + a(2,k)*c2x*s1y*c2

            if (k.eq.3) u = u - a(1,k)*s1x*c2y*c2
            if (k.eq.3) v = v + a(1,k)*c1x*s2y*c1
            if (k.eq.3) u = u - a(2,k)*c2x*c1y*c1
            if (k.eq.3) v = v - a(2,k)*s2x*s1y*c2

            if (k.eq.4) u = u + a(1,k)*c1x*c2y*c2
            if (k.eq.4) v = v + a(1,k)*s1x*s2y*c1
            if (k.eq.4) u = u + a(2,k)*c2x*c1y*c1
            if (k.eq.4) v = v + a(2,k)*s2x*s1y*c2

            if (k.eq.5) u = u - a(1,k)*s1x*c2y*c2
            if (k.eq.5) v = v + a(1,k)*c1x*s2y*c1
            if (k.eq.5) u = u - a(2,k)*s2x*c1y*c1
            if (k.eq.5) v = v + a(2,k)*c2x*s1y*c2
         enddo
         uu(i) = u*e + u0
         vv(i) = v*e + v0
      enddo

      return
      end
!-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      use nekuse 
      udiff =0.
      utrans=0.
      return
      end
!-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      use nekuse
!
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
!-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      use nekuse
!
      qvol   = 0.0
      source = 0.0
      return
      end
!-----------------------------------------------------------------------
      subroutine userchk
      use size_m
      use kinds, only : DP
      use input
      use tstep
      use geom
      use soln
      use usr
      implicit none
!c
      real(DP) :: visc, u0, v0
      real(DP) :: umx, vmx, uex, vex, udx, vdx
      integer :: n

      real(DP), external :: glamax
      real(DP) :: tmax, umax, vmax, wmax


      ifield = 1  ! for outpost

      n    = nx1*ny1*nz1*nelv
      visc = {viscosity:e}
      u0   = {u0:e}
      v0   = {v0:e}
      call exact  (ue,ve,xm1,ym1,n,time,visc,u0,v0)
      if (istep.eq.0     ) call outpost(ue,ve,vx,pr,t,'   ')

      ud = ue - vx
      vd = ve - vy
      if (istep.eq.nsteps) call outpost(ud,vd,vx,pr,t,'err')

      umx = glamax(vx,n)
      vmx = glamax(vy,n)
      uex = glamax(ue,n)
      vex = glamax(ve,n)
      udx = glamax(ud,n)
      vdx = glamax(vd,n)

      if (nid.eq.0) then
          write(6,11) istep,time,udx,umx,uex,u0,'  X err'
          write(6,11) istep,time,vdx,vmx,vex,v0,'  Y err'
   11     format(i5,1p5e14.6,a7)
      endif


      if (istep.le.5) then        !  Reset velocity to eliminate 
         call copy (vx,ue,n)      !  start-up contributions to
         call copy (vy,ve,n)      !  temporal-accuracy behavior.
      endif

      tmax = glamax(t, lx1*ly1*lz1*lelt)
      if (nid == 0) write(*,*) "Maximum scalar", tmax
      umax = glamax(vx, lx1*ly1*lz1*lelt)
      vmax = glamax(vy, lx1*ly1*lz1*lelt)
      wmax = glamax(vz, lx1*ly1*lz1*lelt)
      if (nid == 0) write(*,*) "Maximum velocity", umax, vmax, wmax

      return
      end
!-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
!     NOTE ::: This subroutine MAY NOT be called by every process
      use nekuse
      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0
      return
      end
!-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      use size_m
      use nekuse
      use input
      use parallel
      use geom
      use usr
      implicit none


      integer :: ix, iy, iz, ieg
      integer, save :: icalld = 0
      integer :: n, ie
      real(DP) :: u0, v0, visc, time

      n = nx1*ny1*nz1*nelv
      if (icalld.eq.0) then
         icalld = icalld + 1
         time = 0.
         visc = {viscosity:e}
         u0   = {u0:e}
         v0   = {v0:e}
         call exact (ue,ve,xm1,ym1,n,time,visc,u0,v0)
      endif

      ie = gllel(ieg)
      ux=ue(ix,iy,iz,ie)
      uy=ve(ix,iy,iz,ie)
      uz=0.0
      temp=x

      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat
      use kinds, only : DP
      use size_m, only : nelv
      use input, only : xc, yc
      implicit none

      real(DP) :: one, twopi
      integer e, i

      one   = 1.
      twopi = 8.*atan(one)

      do e=1,nelv   !  Rescale mesh to [0,2pi]^2
      do i=1,8      !  Assumes original domain in .rea file on [0,1]
         xc(i,e) = twopi*xc(i,e)
         yc(i,e) = twopi*yc(i,e)
      enddo
      enddo

      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat2
      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
!-----------------------------------------------------------------------
