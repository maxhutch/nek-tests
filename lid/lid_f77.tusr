C-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).

      common /cmean_t/ tz_mean(lx1,ly1,lz1,lelt)

      integer e,f,eg

      e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq2(q) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real q(lx1, ly1, lz1, lelt)

c      if (ifcoup) then
c         call nekMOAB_import_vars(tTag, 0, q)
c      elseif (ifvcoup) then
c         call nekMOAB_import_vars(vtTag, 1, q)
c      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(ieg),ifield).eq.'v01')

      uy = 0.0
      uz = 0.0
      if (z == {extent_mesh[2]}) then
        ux = {velocity}
        ux = ux * (x - {root_mesh[0]})
        ux = ux * (y - {root_mesh[1]})
        ux = ux * ({extent_mesh[0]} - x)
        ux = ux * ({extent_mesh[1]} - y)
      else
        ux = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
c      use ifport, only : random_number, random_seed
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'ZPER'

      common /cmean_t/ tz_mean(lx1,ly1,lz1,lelt)

      uy = 0.0
      uz = 0.0
      if (z == {extent_mesh[2]}) then
        ux = {velocity}
        ux = ux * (x - {root_mesh[0]})
        ux = ux * (y - {root_mesh[1]})
        ux = ux * ({extent_mesh[0]} - x)
        ux = ux * ({extent_mesh[1]} - y)
      else
        ux = 0.0
      endif


      temp = erf(z) + 1

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'

      real, external :: glmax, glmin
      real :: tmax, umax, vmax, wmax

      if (istep == 0) call outpost(vx,vy,vz,pr,t,'   ')
      tmax = max(glmax(t, lx1*ly1*lz1*lelt),
     $          -glmin(t, lx1*ly1*lz1*lelt))
      if (nid == 0) write(*,'(A,F16.12)') "Maximum scalar", tmax
 
      umax = max(glmax(vx, lx1*ly1*lz1*lelt),
     $          -glmin(vx, lx1*ly1*lz1*lelt))
      vmax = max(glmax(vy, lx1*ly1*lz1*lelt),
     $          -glmin(vy, lx1*ly1*lz1*lelt))
      wmax = max(glmax(vz, lx1*ly1*lz1*lelt),
     $          -glmin(vz, lx1*ly1*lz1*lelt))
      if (nid == 0) write(*,'(A,3F16.11)') "Maximum velocity", 
     $                                    umax, vmax, wmax

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
