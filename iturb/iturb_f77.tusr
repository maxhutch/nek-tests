c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) 
 
      return
      end subroutine uservp
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) 
      include 'SIZE'
      include 'NEKUSE'
     
c       Note: this is an acceleration term, NOT a forcec
c       Thus, ffx will subsequently be multiplied by rho(x,t).
     
     
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0 
     
      return
      end subroutine userf
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) 
      include 'SIZE'
      include 'NEKUSE'
 
      qvol   = 0.0
 
      return
      end subroutine userq
c-----------------------------------------------------------------------
      subroutine userq2(q) 
 
      return
      end subroutine userq2
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg) 
      include 'SIZE'
      include 'NEKUSE'
 
      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0
 
      return
      end subroutine userbc
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) 
#ifdef __INTEL_COMPILER
      use ifport, only : rand, srand
#endif
      include 'SIZE'
      include 'NEKUSE'
 
      integer :: ix, iy, iz, eg
 
      real :: scale, scale_tot, power
      integer :: ind(3), my_shape(3), i, j
      logical, save :: init = .false.
      real, save :: rands(3,100)
 
      if (.not. init) then
        call srand(1)
        write(*,*) rand()
        do i = 1, 100
          rands(1,i) = 2. * (rand() - 0.5)
          rands(2,i) = 2. * (rand() - 0.5)
          rands(3,i) = 2. * (rand() - 0.5)
        enddo
        init = .true.
      endif
 
      my_shape = (/{shape_mesh[0]}, {shape_mesh[1]}, {shape_mesh[2]}/)
      my_shape = my_shape * {order}
      ind = ((/x, y, z/) - (/{root_mesh[0]:f}, {root_mesh[1]:f}, {root_mesh[2]:f}/))
     $ * my_shape / (
     $   (/{extent_mesh[0]:f}, {extent_mesh[1]:f}, {extent_mesh[2]:f}/)
     $ - (/{root_mesh[0]:f}, {root_mesh[1]:f}, {root_mesh[2]:f}/))
      ind = ind * {order} + (/ix, iy, iz/) - 1
 
      ux = 0.; uy = 0.; uz = 0.
      scale = 1.
      scale_tot = 0.
      power = {power}
      j = 1
      do while (my_shape(1) > 1) 
        ux = ux + scale * (1. - 2.*mod(ind(1),2)) * rands(1,j)
        uy = uy + scale * (1. - 2.*mod(ind(1),2)) * rands(2,j)
        uz = uz + scale * (1. - 2.*mod(ind(1),2)) * rands(3,j)
        my_shape(1) = my_shape(1) / 2
        ind(1) = ind(1) / 2
        scale_tot = scale_tot 
     $ + scale * sqrt(rands(1,j)**2 + rands(2,j)**2 + rands(3,j)**2)
        scale = scale * (2. ** power)
        j = j + 1
      enddo
      scale = 1.
      do while (my_shape(2) > 1) 
        ux = ux + scale * (1. - 2.*mod(ind(2),2)) * rands(1,j)
        uy = uy + scale * (1. - 2.*mod(ind(2),2)) * rands(2,j)
        uz = uz + scale * (1. - 2.*mod(ind(2),2)) * rands(3,j)
        my_shape(2) = my_shape(2) / 2
        ind(2) = ind(2) / 2
        scale_tot = scale_tot 
     $ + scale * sqrt(rands(1,j)**2 + rands(2,j)**2 + rands(3,j)**2)
        scale = scale * (2. ** power)
        j = j + 1
      enddo
      scale = 1.
      do while (my_shape(3) > 1) 
        ux = ux + scale * (1. - 2.*mod(ind(3),2)) * rands(1,j)
        uy = uy + scale * (1. - 2.*mod(ind(3),2)) * rands(2,j)
        uz = uz + scale * (1. - 2.*mod(ind(3),2)) * rands(3,j)
        my_shape(3) = my_shape(3) / 2
        ind(3) = ind(3) / 2
        scale_tot = scale_tot 
     $ + scale * sqrt(rands(1,j)**2 + rands(2,j)**2 + rands(3,j)**2)
        scale = scale * (2. ** power)
        j = j + 1
      enddo
      ux = {amp0} * ux / scale_tot
      uy = {amp0} * uy / scale_tot
      uz = {amp0} * uz / scale_tot
 
      if (z > 0) then
        temp = 1.0
      else
        temp = -1.0
      endif
 
      return
      end subroutine useric
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'

      real, external :: glmax, glmin
      real :: tmax, umax, vmax, wmax

      if (istep == 0) call outpost(vx,vy,vz,pr,t,'   ')
      tmax = max(glmax(t, lx1*ly1*lz1*lelt),
     $          -glmin(t, lx1*ly1*lz1*lelt))
      if (nid == 0) write(*,'(A,F16.12)') "Maximum scalar", tmax
 
      umax = max(glmax(vx, lx1*ly1*lz1*lelt),
     $          -glmin(vx, lx1*ly1*lz1*lelt))
      vmax = max(glmax(vy, lx1*ly1*lz1*lelt),
     $          -glmin(vy, lx1*ly1*lz1*lelt))
      wmax = max(glmax(vz, lx1*ly1*lz1*lelt),
     $          -glmin(vz, lx1*ly1*lz1*lelt))
      if (nid == 0) write(*,'(A,3F16.11)') "Maximum velocity", 
     $                                    umax, vmax, wmax

      return
      end subroutine userchk
c-----------------------------------------------------------------------
      subroutine usrdat()   
 
      return
      end subroutine usrdat
c-----------------------------------------------------------------------
      subroutine usrdat2()  
 
 
      return
      end subroutine usrdat2
c-----------------------------------------------------------------------
      subroutine usrdat3()
 
      return
      end subroutine usrdat3
c-----------------------------------------------------------------------
